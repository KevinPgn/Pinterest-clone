datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pins          Pin[]

  registerPosts RegisterPost[]
  likes Like[]
  comments Comment[]

  followers Follow[] @relation("follower")
  following Follow[] @relation("following")

  blockedUsers BlockUser[] @relation("BlockedUsers")
  blockedBy BlockUser[] @relation("BlockedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// pintereset clone

model Pin {
  id String @id @default(cuid())

  title String
  description String
  imageUrl String
  link String
  views Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  registerPosts RegisterPost[]
  likes Like[]
  comments Comment[]

  @@index([authorId])
}

model RegisterPost {
  id String @id @default(cuid())

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  pinId String
  pin Pin @relation(fields: [pinId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, pinId])
}

model Follow {
  id String @id @default(cuid())

  followerId String
  follower User @relation(name: "follower", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following User @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Comment {
  id String @id @default(cuid())
  content String

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  pinId String
  pin Pin @relation(fields: [pinId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId, pinId])
}

model Like {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  pinId String
  pin Pin @relation(fields: [pinId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, pinId])
}

model BlockUser {
  id String @id @default(cuid())

  authorId String
  author User @relation(name: "BlockedUsers", fields: [authorId], references: [id], onDelete: Cascade)

  blockedUserId String
  blockedUser User @relation(name: "BlockedBy", fields: [blockedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId, blockedUserId])
  @@unique([authorId, blockedUserId])
}